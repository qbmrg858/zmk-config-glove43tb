#define ZMK_POINTING_DEFAULT_SCRL_VAL 150

#include <behaviors/rgbled_widget.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

&mmv {
    delay-ms = <20>;
    trigger-period-ms = <5>;
    time-to-max-speed-ms = <100>;
    acceleration-exponent = <2>;
};

&msc {
    delay-ms = <3>;
    trigger-period-ms = <3>;
    time-to-max-speed-ms = <100>;
    acceleration-exponent = <0>;
};

/ {
    input_processors {
        zip_wheel_scaler: zip_wheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_WHEEL>;
            track-remainders;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        sensor_rotate_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        mouse_wheel_scroll: mouse_wheel_scroll {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &mt LEFT_CONTROL E  &kp R             &kp T                                                            &kp Y        &kp U              &lt 0 I          &kp O            &kp P
&mt LEFT_SHIFT A  &mt LEFT_ALT S  &mt LEFT_GUI D      &mt LEFT_SHIFT F  &mt LEFT_CONTROL G  &trans                        &kp EQUAL      &mt LCTRL H  &mt RIGHT_SHIFT J  &mt RIGHT_GUI K  &mt RIGHT_ALT L  &mt RIGHT_SHIFT MINUS
&kp Z             &kp X           &kp C               &kp V             &kp B               &kp LC(LS(LG(NUMBER_4)))      &kp SEMICOLON  &kp N        &kp M              &kp COMMA        &kp DOT          &kp SLASH
&kp LG(C)         &kp LEFT_ALT    &kp LEFT_CONTROL    &lt 5 F24         &lt 2 SPACE         &lt 3 TAB                     &lt 3 F24      &lt 1 ENTER                                                       &kp LG(V)
            >;

            sensor-bindings = <&mouse_wheel_scroll SCRL_DOWN SCRL_UP>;
        };

        ARROW_NUMBER {
            bindings = <
&trans  &kp N7        &kp N8  &kp N9     &kp STAR                           &kp LG(LEFT_ARROW)  &kp LA(LEFT_ARROW)  &kp UP_ARROW    &kp LA(RIGHT_ARROW)  &kp LG(RIGHT_ARROW)
&trans  &kp N4        &kp N5  &kp N6     &kp PLUS    &trans         &trans  &kp LG(UP_ARROW)    &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &trans
&trans  &kp NUMBER_1  &kp N2  &kp N3     &kp N0      &trans         &trans  &kp LG(DOWN_ARROW)  &trans              &trans          &trans               &trans
&trans  &trans        &trans  &kp LG(X)  &kp ESCAPE  &kp LG(Z)      &trans  &trans                                                                       &trans
            >;
        };

        MOUSE_KIGO {
            bindings = <
&trans  &trans    &mkp MCLK  &trans    &trans                             &kp PLUS       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOUBLE_QUOTES  &kp COLON
&trans  &mkp MB4  &mkp MB2   &mkp MB1  &mkp MB5  &trans      &trans       &kp EQUAL      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SQT            &kp SEMICOLON
&trans  &trans    &trans     &trans    &trans    &trans      &kp LS(F23)  &kp UNDER      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp F23            &kp NON_US_BACKSLASH
&trans  &trans    &trans     &trans    &trans    &trans      &kp DELETE   &kp BACKSPACE                                                                  &kp PIPE
            >;
        };

        UTILITY {
            bindings = <
&trans       &trans        &trans        &trans        &trans                               &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans       &trans        &trans        &trans        &trans    &trans        &trans       &trans        &trans        &trans        &trans        &trans
&trans       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &ind_con  &ind_bat      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&bootloader  &trans        &trans        &trans        &trans    &trans        &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        RESERVE_1 {
            bindings = <
&trans  &kp LC(LG(LA(LEFT_ARROW)))  &kp LC(LA(M))  &kp LA(LC(LG(RIGHT_ARROW)))  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans                      &trans         &trans                       &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans                      &trans         &trans                       &trans  &trans      &kp F24  &trans  &trans  &trans  &trans  &kp F11
&trans  &trans                      &trans         &trans                       &trans  &trans      &trans   &trans                          &kp F12
            >;

            sensor-bindings = <&sensor_rotate_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        SCROLL_DONTMOVE {
            bindings = <
&trans  &kp LA(LC(LG(LEFT_ARROW)))  &kp LA(LC(M))  &kp LG(LC(LA(RIGHT_ARROW)))  &trans                      &kp F1  &kp F2  &kp F3  &kp F4   &kp F5
&trans  &trans                      &trans         &trans                       &trans  &trans      &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&trans  &trans                      &trans         &trans                       &trans  &trans      &trans  &trans  &trans  &trans  &trans   &kp F12
&trans  &trans                      &trans         &trans                       &trans  &trans      &trans  &trans                           &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
